@using LASI.Utilities;
@using Newtonsoft.Json.Serialization;
@using MvcApplication2.LexicalElementSerialization;
@using MvcApplication2.LexicalElementInfo;
@using Newtonsoft.Json;



<title>@ViewBag.Title</title>

@{var doc = ViewData["doc"] as LASI.Core.DocumentStructures.Document;
    <h2>@doc.Name</h2>

    var styleMap = new MvcApplication2.SyntacticStyleMapping();
    var withIds = ContextMenuBuilder.BindClientSideIds(doc.Phrases);
    foreach (var paragraphElements in from phrase in withIds
                                      join bare in doc.Phrases on phrase.Element equals bare
                                      let withMenuData = ContextMenuBuilder.ForLexical(phrase, withIds)
                                      group withMenuData by bare.Paragraph) {
        <p class="lexical-content-block">
            @foreach (var element in paragraphElements) {
                <span class=@styleMap[element.Element.Element].CssClass title=@element.Element.Element.Type.Name id=@element.Element.Id>
                    @element.Element.Element.Text
                    <span id=@("context"+element.Element.Id)>
                        @JsonConvert.SerializeObject(element.MenuMappingData,

                    new JsonSerializerSettings {
                        ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                        ObjectCreationHandling = ObjectCreationHandling.Reuse,
                        PreserveReferencesHandling = PreserveReferencesHandling.All,
                        StringEscapeHandling = StringEscapeHandling.EscapeNonAscii,
                        MaxDepth = 1,
                    }).Trim(';')
                    </span>
                </span>
            }

        </p>

    }
    @section scripts{
        @Scripts.Render(@".\..\Scripts\jquery-ui-1.10.3.js");
        @Scripts.Render(@".\..\Scripts\Example.js");
    }

}
