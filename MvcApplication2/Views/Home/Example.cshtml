@using LASI.Utilities;
@using Newtonsoft.Json.Serialization;
@using MvcApplication2.LexicalElementSerialization;
@using MvcApplication2.LexicalElementInfo;
@using Newtonsoft.Json;



<title>@ViewBag.Title</title>
@*@{var doc = ViewData["doc"] as LASI.Core.DocumentStructures.Document;*@
<div id="tabs">
    <ul id="documentlist">

        @foreach (var doc in ViewData["docs"] as IEnumerable<LASI.Core.DocumentStructures.Document>) {
            <li class="document-selection-tab">
                <a href=@("#"+doc.Name)>
                    <h2>@doc.Name</h2>
                </a>
            </li>
        }
    </ul>
    @foreach (var doc in ViewData["docs"] as IEnumerable<LASI.Core.DocumentStructures.Document>) {
        <div id=@doc.Name>
            @{var styleMap = new MvcApplication2.SyntacticStyleMapping();
            var withIds = ContextMenuBuilder.BindClientSideIds(doc.Phrases);
            foreach (var annotatedLexicalElements in from phrase in withIds
                                                     join bare in doc.Phrases on phrase.Element equals bare
                                                     let withMenuData = ContextMenuBuilder.ForLexical(phrase, withIds)
                                                     group withMenuData by bare.Paragraph) {
                <p class="lexical-content-block">
                    @foreach (var e in annotatedLexicalElements) {
                        <span class=@styleMap[e.Lexical].CssClass title="@string.Join("",e.Lexical.Type.Name.Select(c => c.IsUpper() ? " " +c  : c.ToString()))" id=@e.Id>
                            @e.Lexical.Text
                            <span id=@("context"+e.Id)>
                                @JsonConvert.SerializeObject(e.MenuMappingData.MenuEntries.ToArray(),

                                new JsonSerializerSettings {
                                    ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
                                    ObjectCreationHandling = ObjectCreationHandling.Reuse,
                                    PreserveReferencesHandling = PreserveReferencesHandling.All,
                                    StringEscapeHandling = StringEscapeHandling.EscapeNonAscii,
                                    MaxDepth = 1,
                                }).Trim(';')
                            </span>
                        </span>


                    }
                </p>



            }

            }

        </div>
    }
</div>            @section scripts{
    @Scripts.Render(@".\..\Scripts\jquery-ui-contextmenu.js");
    @Scripts.Render(@".\..\Scripts\jquery-ui-1.10.3.js");
    @Scripts.Render(@".\..\Scripts\app\Example\Example.js");
}


